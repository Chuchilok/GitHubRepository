<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dogpro.dao.WalkingDogGroupMapper" >
  <resultMap id="BaseResultMap" type="com.dogpro.domain.model.WalkingDogGroup" >
    <id column="groupId" property="groupid" jdbcType="BIGINT" />
    <result column="userId" property="userid" jdbcType="BIGINT" />
    <result column="doglocationId" property="doglocationid" jdbcType="BIGINT" />
    <result column="isDisturb" property="isdisturb" jdbcType="INTEGER" />
    <result column="joinTimes" property="jointimes" jdbcType="TIMESTAMP" />
    <result column="joinLongitude" property="joinlongitude" jdbcType="DECIMAL" />
    <result column="joinLatitude" property="joinlatitude" jdbcType="DECIMAL" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="endTimes" property="endtimes" jdbcType="TIMESTAMP" />
    <result column="endLongitude" property="endlongitude" jdbcType="DECIMAL" />
    <result column="endLatitude" property="endlatitude" jdbcType="DECIMAL" />
    <result column="outTimes" property="outtimes" jdbcType="TIMESTAMP" />
    <result column="outLongitude" property="outlongitude" jdbcType="DECIMAL" />
    <result column="outLatitude" property="outlatitude" jdbcType="DECIMAL" />
    <result column="addTimes" property="addtimes" jdbcType="TIMESTAMP" />
    <result column="updateTimes" property="updatetimes" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    groupId, userId, doglocationId, isDisturb, joinTimes, joinLongitude, joinLatitude, 
    state, endTimes, endLongitude, endLatitude, outTimes, outLongitude, outLatitude, 
    addTimes, updateTimes
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.dogpro.domain.model.WalkingDogGroupExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from WalkingDogGroup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="pagination != null" >
      limit #{pagination.begin} , #{pagination.length}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from WalkingDogGroup
    where groupId = #{groupid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from WalkingDogGroup
    where groupId = #{groupid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.dogpro.domain.model.WalkingDogGroupExample" >
    delete from WalkingDogGroup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dogpro.domain.model.WalkingDogGroup" >
    insert into WalkingDogGroup (groupId, userId, doglocationId, 
      isDisturb, joinTimes, joinLongitude, 
      joinLatitude, state, endTimes, 
      endLongitude, endLatitude, outTimes, 
      outLongitude, outLatitude, addTimes, 
      updateTimes)
    values (#{groupid,jdbcType=BIGINT}, #{userid,jdbcType=BIGINT}, #{doglocationid,jdbcType=BIGINT}, 
      #{isdisturb,jdbcType=INTEGER}, #{jointimes,jdbcType=TIMESTAMP}, #{joinlongitude,jdbcType=DECIMAL}, 
      #{joinlatitude,jdbcType=DECIMAL}, #{state,jdbcType=INTEGER}, #{endtimes,jdbcType=TIMESTAMP}, 
      #{endlongitude,jdbcType=DECIMAL}, #{endlatitude,jdbcType=DECIMAL}, #{outtimes,jdbcType=TIMESTAMP}, 
      #{outlongitude,jdbcType=DECIMAL}, #{outlatitude,jdbcType=DECIMAL}, #{addtimes,jdbcType=TIMESTAMP}, 
      #{updatetimes,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="groupid"  parameterType="com.dogpro.domain.model.WalkingDogGroup" >
    insert into WalkingDogGroup
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="groupid != null" >
        groupId,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="doglocationid != null" >
        doglocationId,
      </if>
      <if test="isdisturb != null" >
        isDisturb,
      </if>
      <if test="jointimes != null" >
        joinTimes,
      </if>
      <if test="joinlongitude != null" >
        joinLongitude,
      </if>
      <if test="joinlatitude != null" >
        joinLatitude,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="endtimes != null" >
        endTimes,
      </if>
      <if test="endlongitude != null" >
        endLongitude,
      </if>
      <if test="endlatitude != null" >
        endLatitude,
      </if>
      <if test="outtimes != null" >
        outTimes,
      </if>
      <if test="outlongitude != null" >
        outLongitude,
      </if>
      <if test="outlatitude != null" >
        outLatitude,
      </if>
      <if test="addtimes != null" >
        addTimes,
      </if>
      <if test="updatetimes != null" >
        updateTimes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="groupid != null" >
        #{groupid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="doglocationid != null" >
        #{doglocationid,jdbcType=BIGINT},
      </if>
      <if test="isdisturb != null" >
        #{isdisturb,jdbcType=INTEGER},
      </if>
      <if test="jointimes != null" >
        #{jointimes,jdbcType=TIMESTAMP},
      </if>
      <if test="joinlongitude != null" >
        #{joinlongitude,jdbcType=DECIMAL},
      </if>
      <if test="joinlatitude != null" >
        #{joinlatitude,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="endtimes != null" >
        #{endtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="endlongitude != null" >
        #{endlongitude,jdbcType=DECIMAL},
      </if>
      <if test="endlatitude != null" >
        #{endlatitude,jdbcType=DECIMAL},
      </if>
      <if test="outtimes != null" >
        #{outtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="outlongitude != null" >
        #{outlongitude,jdbcType=DECIMAL},
      </if>
      <if test="outlatitude != null" >
        #{outlatitude,jdbcType=DECIMAL},
      </if>
      <if test="addtimes != null" >
        #{addtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetimes != null" >
        #{updatetimes,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExampleGroup" parameterType="com.dogpro.domain.model.WalkingDogGroupExample" resultType="java.lang.Integer" >
    select count(a.doglocationid) from (
    select doglocationid from WalkingDogGroup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    group by doglocationid
    ) a
  </select>
  <select id="countByExample" parameterType="com.dogpro.domain.model.WalkingDogGroupExample" resultType="java.lang.Integer" >
    select count(*) from WalkingDogGroup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update WalkingDogGroup
    <set >
      <if test="record.groupid != null" >
        groupId = #{record.groupid,jdbcType=BIGINT},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=BIGINT},
      </if>
      <if test="record.doglocationid != null" >
        doglocationId = #{record.doglocationid,jdbcType=BIGINT},
      </if>
      <if test="record.isdisturb != null" >
        isDisturb = #{record.isdisturb,jdbcType=INTEGER},
      </if>
      <if test="record.jointimes != null" >
        joinTimes = #{record.jointimes,jdbcType=TIMESTAMP},
      </if>
      <if test="record.joinlongitude != null" >
        joinLongitude = #{record.joinlongitude,jdbcType=DECIMAL},
      </if>
      <if test="record.joinlatitude != null" >
        joinLatitude = #{record.joinlatitude,jdbcType=DECIMAL},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.endtimes != null" >
        endTimes = #{record.endtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endlongitude != null" >
        endLongitude = #{record.endlongitude,jdbcType=DECIMAL},
      </if>
      <if test="record.endlatitude != null" >
        endLatitude = #{record.endlatitude,jdbcType=DECIMAL},
      </if>
      <if test="record.outtimes != null" >
        outTimes = #{record.outtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="record.outlongitude != null" >
        outLongitude = #{record.outlongitude,jdbcType=DECIMAL},
      </if>
      <if test="record.outlatitude != null" >
        outLatitude = #{record.outlatitude,jdbcType=DECIMAL},
      </if>
      <if test="record.addtimes != null" >
        addTimes = #{record.addtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetimes != null" >
        updateTimes = #{record.updatetimes,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update WalkingDogGroup
    set groupId = #{record.groupid,jdbcType=BIGINT},
      userId = #{record.userid,jdbcType=BIGINT},
      doglocationId = #{record.doglocationid,jdbcType=BIGINT},
      isDisturb = #{record.isdisturb,jdbcType=INTEGER},
      joinTimes = #{record.jointimes,jdbcType=TIMESTAMP},
      joinLongitude = #{record.joinlongitude,jdbcType=DECIMAL},
      joinLatitude = #{record.joinlatitude,jdbcType=DECIMAL},
      state = #{record.state,jdbcType=INTEGER},
      endTimes = #{record.endtimes,jdbcType=TIMESTAMP},
      endLongitude = #{record.endlongitude,jdbcType=DECIMAL},
      endLatitude = #{record.endlatitude,jdbcType=DECIMAL},
      outTimes = #{record.outtimes,jdbcType=TIMESTAMP},
      outLongitude = #{record.outlongitude,jdbcType=DECIMAL},
      outLatitude = #{record.outlatitude,jdbcType=DECIMAL},
      addTimes = #{record.addtimes,jdbcType=TIMESTAMP},
      updateTimes = #{record.updatetimes,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dogpro.domain.model.WalkingDogGroup" >
    update WalkingDogGroup
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=BIGINT},
      </if>
      <if test="doglocationid != null" >
        doglocationId = #{doglocationid,jdbcType=BIGINT},
      </if>
      <if test="isdisturb != null" >
        isDisturb = #{isdisturb,jdbcType=INTEGER},
      </if>
      <if test="jointimes != null" >
        joinTimes = #{jointimes,jdbcType=TIMESTAMP},
      </if>
      <if test="joinlongitude != null" >
        joinLongitude = #{joinlongitude,jdbcType=DECIMAL},
      </if>
      <if test="joinlatitude != null" >
        joinLatitude = #{joinlatitude,jdbcType=DECIMAL},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="endtimes != null" >
        endTimes = #{endtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="endlongitude != null" >
        endLongitude = #{endlongitude,jdbcType=DECIMAL},
      </if>
      <if test="endlatitude != null" >
        endLatitude = #{endlatitude,jdbcType=DECIMAL},
      </if>
      <if test="outtimes != null" >
        outTimes = #{outtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="outlongitude != null" >
        outLongitude = #{outlongitude,jdbcType=DECIMAL},
      </if>
      <if test="outlatitude != null" >
        outLatitude = #{outlatitude,jdbcType=DECIMAL},
      </if>
      <if test="addtimes != null" >
        addTimes = #{addtimes,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetimes != null" >
        updateTimes = #{updatetimes,jdbcType=TIMESTAMP},
      </if>
    </set>
    where groupId = #{groupid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dogpro.domain.model.WalkingDogGroup" >
    update WalkingDogGroup
    set userId = #{userid,jdbcType=BIGINT},
      doglocationId = #{doglocationid,jdbcType=BIGINT},
      isDisturb = #{isdisturb,jdbcType=INTEGER},
      joinTimes = #{jointimes,jdbcType=TIMESTAMP},
      joinLongitude = #{joinlongitude,jdbcType=DECIMAL},
      joinLatitude = #{joinlatitude,jdbcType=DECIMAL},
      state = #{state,jdbcType=INTEGER},
      endTimes = #{endtimes,jdbcType=TIMESTAMP},
      endLongitude = #{endlongitude,jdbcType=DECIMAL},
      endLatitude = #{endlatitude,jdbcType=DECIMAL},
      outTimes = #{outtimes,jdbcType=TIMESTAMP},
      outLongitude = #{outlongitude,jdbcType=DECIMAL},
      outLatitude = #{outlatitude,jdbcType=DECIMAL},
      addTimes = #{addtimes,jdbcType=TIMESTAMP},
      updateTimes = #{updatetimes,jdbcType=TIMESTAMP}
    where groupId = #{groupid,jdbcType=BIGINT}
  </update>
  
  <resultMap id="UserResultMap" type="com.dogpro.domain.model.User" >
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="headPic" property="headpic" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="sign" property="sign" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="pswd" property="pswd" jdbcType="VARCHAR" />
    <result column="provinces" property="provinces" jdbcType="VARCHAR" />
    <result column="municipalities" property="municipalities" jdbcType="VARCHAR" />
    <result column="districts" property="districts" jdbcType="VARCHAR" />
    <result column="townStreet" property="townstreet" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="addTimes" property="addtimes" jdbcType="TIMESTAMP" />
    <result column="updateTimes" property="updatetimes" jdbcType="TIMESTAMP" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="offlineTimes" property="offlinetimes" jdbcType="BIGINT" />
    <result column="isCompleted" property="iscompleted" jdbcType="INTEGER" />
    <result column="UUID" property="uuid" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="selectToGroupByExample" resultMap="BaseResultMap" parameterType="com.dogpro.domain.model.WalkingDogGroupExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from WalkingDogGroup
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    group by doglocationid
    <if test="pagination != null" >
      limit #{pagination.begin} , #{pagination.length}
    </if>
  </select>
  <select id="selectByUidLid" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    <![CDATA[
    from WalkingDogGroup
    where userId = #{userId,jdbcType=VARCHAR} and doglocationId = #{dogLocationId,jdbcType=VARCHAR}
    and state != 0
    ]]>
  </select>
  
  <select id="selectByUid" resultMap="BaseResultMap" parameterType="map" >
    select
    <include refid="Base_Column_List" />
    <![CDATA[
    from WalkingDogGroup
    where userId = #{userId,jdbcType=VARCHAR} 
    and state != 0
    ]]>
  </select>
  
  <select id="readGroupUser" resultMap="UserResultMap" parameterType="map" >
    SELECT u.* 
    FROM
WalkingDogGroup w,`User` u
WHERE w.userId = u.user_id
<if test="isContain != null and isContain==0" >
      AND w.userId!= #{userId}
    </if>
AND w.state!=0
AND u.isCompleted = 1
AND w.doglocationId = #{dogLocationId}
<if test="pagination != null" >
      limit #{pagination.begin} , #{pagination.length}
    </if>
  </select>
  
</mapper>